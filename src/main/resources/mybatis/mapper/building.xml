<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--映射文件配置，namespace指向接口-->
<mapper namespace="com.energy.mapper.BuildingMapper">
    <!--
        select标签代表查询
        findById要与接口中的方法名对应上
    -->
    <select id="findById" parameterType="Integer" resultType="com.energy.entity.Building">
        select * from building_base where id = #{id}
    </select>

    <!--
    <if test="userName != null">
        AND u.name like '%${userName}%'
    </if>

    <if test="prodType != null and prodType !='' and prodType == '1'.toString()">
        AND purchase.prodType=1
    </if>

    <foreach item="item" index="index" collection="series" open="(" separator="," close=")">
        #{item}
    </foreach>
    -->

    <!-- 获取用户建筑列表 -->
    <select id="getBuildingsByUserId" resultType="java.util.HashMap">
        <![CDATA[
        select
          b.*
        from a_building b
        where b.id in (
            select building_id from a_user_building where user_id = #{userId}
        )
        ]]>
    </select>

    <!-- 查询某个用户下的建筑列表 -->
    <select id="getBuildingsByUserName" resultType="java.util.HashMap">
        <![CDATA[
        select * from building_base b
          left join users u on u.id = b.owner_id
        where u.name like '%${userName}%'
        ]]>
    </select>


    <!-- 查询某个建筑下的所有采集器 -->
    <select id="getBuildingCollectors" resultType="java.util.HashMap">
        <![CDATA[
        select
            c.*,
            'collector' as type,
            '采集器' as type_txt
        from collector c
        where build_id = #{buildingId}
            and status = '正常'
        ]]>
    </select>

    <select id="getBuildingItems" resultType="java.util.LinkedHashMap">
        SELECT
        *
        FROM a_item i
        LEFT JOIN a_collector c on c.id = i.collector_id
        where c.building_id = #{buildingId}
    </select>

    <!-- 设备分组  -->
    <select id="getItemGroups" resultType="java.util.LinkedHashMap">
        select
            g.*,
            IFNULL(gg.itemNum,0) as itemNum
        from a_item_group g
        left join (
            select
                count(id) as itemNum,
                group_id
            from a_item_group_mapper
            group by group_id
        ) gg on gg.group_id = g.id
        where g.building_id = #{buildingId}
    </select>

    <select id="getItemById" resultType="com.energy.entity.Item">
        SELECT
          *
        FROM a_item
        WHERE id = #{id}
    </select>
    <insert id="createItem" parameterType="com.energy.entity.Item">
        INSERT INTO `a_item` (`collector_id`, `item_type`, `code`, `name`, `description`, `data_type`,
            `data_unit`, `coefficient`, `max_value`)
        VALUES ( #{collectorId}, #{itemType}, #{code}, #{name}, #{description}, #{dataType}, #{dataUnit},
            #{coefficient}, #{maxValue})
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateItem" parameterType="com.energy.entity.Item">
        UPDATE `a_item`
        set `collector_id` = #{collectorId}, `item_type` = #{itemType}, `code`= #{code}, `name`= #{name},
            `description`= #{description}, `data_type`= #{dataType}, `data_unit`= #{dataUnit}, `coefficient`= #{coefficient},
            `max_value`= #{maxValue}
        where id = ${id}
    </update>
    <delete id="deleteItem" parameterType="Integer">
        DELETE FROM a_item WHERE id = #{id}
    </delete>


    <select id="getBasicDatas" resultType="java.util.LinkedHashMap">
        SELECT * FROM a_basic_data
    </select>
    <select id="getBasicDataById" resultType="com.energy.entity.BasicData">
        SELECT
        *
        FROM a_basic_data
        WHERE id = #{id}
    </select>
    <insert id="createBasicData" parameterType="com.energy.entity.BasicData">
        INSERT INTO `a_basic_data` (`type`, `name`, `basic_code`, `basic_name`, `note`)
        VALUES ( #{type}, #{name}, #{basicCode}, #{basicName}, #{note})
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateBasicData" parameterType="com.energy.entity.BasicData">
        UPDATE `a_basic_data`
        set `type` = #{type}, `name` = #{name}, `basic_code`= #{basicCode}, `basic_name`= #{basicName}, `note`= #{note}
        where id = ${id}
    </update>
    <delete id="deleteBasicData" parameterType="Integer">
        DELETE FROM a_basic_data WHERE id = #{id}
    </delete>

    <select id="getItemGroupByType" resultType="java.util.LinkedHashMap">
        <![CDATA[
        SELECT
          id,
          code,
          name,
          parent,
          area,
          note
        FROM a_item_group
        where building_id = #{buildingId} and `type` = #{subType} and left(code, 2) = #{type}
        ]]>
        <if test="parent != null">
            <![CDATA[
            AND parent = #{parent}
            ]]>
        </if>
        <if test="parent == null">
            <![CDATA[
            -- 拿到所有记录
            -- AND (parent is null or parent = "" or parent <= 0)
            ]]>
        </if>
        <![CDATA[
        order by code asc
        ]]>
    </select>

    <!-- 查询某个记录 -->
    <select id="getItemGroupIdByEnergyType" resultType="com.energy.entity.ItemGroup">
        select
    </select>
    <select id="getItemGroupById" resultType="com.energy.entity.ItemGroup">
        <![CDATA[
        SELECT
            g.id,
            g.code,
            g.type,
            g.name,
            g.parent,
            g.note,
            -- 如果当前分类无面积, 获取父类面积
            case
                when g.area > 0 then g.area
                else gp.area
            end area
        FROM a_item_group g
        left join a_item_group gp on gp.id = g.parent
        where g.id = #{id}
        ]]>
    </select>
    <select id="getItemGroupChildsById" resultType="java.util.LinkedHashMap">
        <![CDATA[
        SELECT * FROM a_item_group where parent = #{id}
        ]]>
    </select>
    <insert id="createItemGroup" parameterType="com.energy.entity.ItemGroup">
        INSERT INTO `a_item_group` (`code`, `type`, `name`, `parent`, `area`, `note`, `building_id`)
        VALUES ( #{code}, #{type}, #{name}, #{parent}, #{area}, #{note}, #{building_id})
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateItemGroup" parameterType="com.energy.entity.ItemGroup">
        UPDATE `a_item_group`
          set `code` = #{code}, `type` = #{type}, `name`= #{name}, `parent`= #{parent}, `area`= #{area}, `note`= #{note}
        where id = ${id}
    </update>
    <delete id="deleteItemGroup" parameterType="Integer">
        DELETE FROM a_item_group WHERE id = #{id}
    </delete>

    <!-- 删除设备分组中的设备绑定 -->
    <delete id="deleteItemGroupMapper">
        DELETE FROM a_item_group_mapper WHERE group_id = #{groupId}
    </delete>
    <!-- 添加多个设备绑定 -->
    <insert id="insertItemGroupMapper">
        insert into a_item_group_mapper (item_id, group_id) VALUES
        <foreach collection="itemIds" item="item" index="index" separator=",">
            (#{item},#{groupId})
        </foreach>
    </insert>

    <!-- 拿到所有 能耗分项 对应的总表类型 -->
    <select id="getBuildingItemTypes" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
          group_id,
          NULLIF(item_id, -1) as item_id
        from v_group_item gi
        where gi.group_type = #{type} and group_building_id=#{buildingId}
          and (gi.group_parent is null or gi.group_parent <= 0)
        ]]>
    </select>

    <!-- 拿到所有 能耗分项 对应的总表类型 -->
    <select id="getItemDatasByHour" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_hour tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByDay" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_day tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByMonth" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_month tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByYear" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_year tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <!-- 多个设备，某个时间段内 总值 -->
    <select id="getItemsSummaryVal" resultType="float">
        <![CDATA[
        select
            IFNULL(sum(val),0) as total_val
        from v_item_val_by_year
        where recorded_at >= #{from} and recorded_at <= #{to}
          and item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!-- 某个分组下的所有设备 -->
    <select id="getItemsByGroupId" resultType="java.util.HashMap">
        <![CDATA[
        select
            i.id,
            i.code,
            i.name
        from a_item_group g
            LEFT JOIN a_item_group_mapper m on m.group_id = g.id
            LEFT JOIN a_item i on i.id = m.item_id
        where g.id = #{groupId}
        order by i.item_type asc, i.collector_id asc, i.name asc
        ]]>
    </select>

    <select id="getItemTypeBaseInfo" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            t.id,
            t.code as type_code,
            t.name as type_name,
            t2.code,
            t2.name,
            t2.calculate,
            t2.table_name,
            t2.parent,
            t2.unit,
            t2.basic_code,
            r.name as rate_name,
            r.rate_type,
            r.cycle as rate_cycle,
            rd.rate,
            rd.num_start,
            rd.num_end,
            rd.time_start,
            rd.time_end
        from a_item_type t
        RIGHT JOIN a_item_type t2 on t2.parent = t.id
        left join a_rate r on r.energy_type = t2.basic_code and r.`status` = 0
        LEFT JOIN a_rate_data rd on rd.rate_id = r.id
        where t.id !="" and t2.calculate != ""
        ]]>
    </select>


    <select id="getItemData" resultType="com.energy.entity.ItemData">
        select
          id,
          item_id as itemId,
          indication,
          other_data as otherData,
          updated_at as updatedAt
        from a_item_data;
    </select>

    <update id="updateItemDatas">
        update a_item_data set indication = indication + rand()*30, updated_at = NOW();
    </update>

    <select id="getEnergyDataLatest" resultType="com.energy.entity.EnergyData">
        select
          e.id,
          e.item_id as itemId,
          e.indication,
          e.diff_indication as diffIndication,
          e.other_data as otherData,
          e.updated_at as updatedAt
        from a_energy_data e
        right join (
            select max(id) as id
            from a_energy_data
            GROUP by item_id
        ) tmp on tmp.id = e.id
    </select>

    <!-- 同步多条记录 -->
    <insert id="recordEnergyDatas">
        insert into a_energy_data (item_id, indication, diff_indication, other_data, recorded_at) VALUES
        <foreach collection="energyDataList" item="item" index="index" separator=",">
            (#{item.itemId}, #{item.indication}, #{item.diffIndication}, #{item.otherData}, #{item.recordedAt})
        </foreach>
    </insert>

</mapper>