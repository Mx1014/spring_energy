<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--映射文件配置，namespace指向接口-->
<mapper namespace="com.energy.mapper.BuildingMapper">

    <select id="getBuildingById" parameterType="Integer" resultType="com.energy.entity.Building">
        select
            b.id,
            b.code,
            b.name,
            b.type,
            b.province,
            b.city,
            b.address,
            b.build_year as buildYear,
            b.floor_num as floorNum,
            b.area,
            b.refrigeration_area as refrigerationArea,
            b.heating_area as heatingArea,
            b.heating_area,
            b.air_conditioning as airConditioning,
            b.heating;
            b.coefficient;
            b.ratio;
            b.structure;
            b.wall_material as wallMaterial,
            b.wall_warm as wallWarm,
            b.window,
            b.glass,
            b.window_frame as windowFrame,
            b.latitude,
            b.longitude,
            b.owner,
            b.intro,
            b.photo_url as photoUrl,
            b.insert_date as insertDate,
            b.monitoring
        from building_base
        where id = #{id}
    </select>

    <!-- 获取用户建筑列表 -->
    <select id="getBuildingsByUserId" resultType="com.energy.entity.Building">
        <![CDATA[
        select
            b.id,
            b.code,
            b.name,
            b.type,
            b.province,
            b.city,
            b.address,
            b.build_year as buildYear,
            b.floor_num as floorNum,
            b.area,
            b.refrigeration_area as refrigerationArea,
            b.heating_area as heatingArea,
            b.heating_area,
            b.air_conditioning as airConditioning,
            b.heating;
            b.coefficient;
            b.ratio;
            b.structure;
            b.wall_material as wallMaterial,
            b.wall_warm as wallWarm,
            b.window,
            b.glass,
            b.window_frame as windowFrame,
            b.latitude,
            b.longitude,
            b.owner,
            b.intro,
            b.photo_url as photoUrl,
            b.insert_date as insertDate,
            b.monitoring
        from a_building b
        where b.id in (
            select building_id from a_user_building where user_id = #{userId}
        )
        ]]>
    </select>

    <!-- 查询某个建筑下的所有采集器 -->
    <select id="getBuildingCollectors" resultType="java.util.HashMap">
        <![CDATA[
        select
            c.*,
            'collector' as type,
            '采集器' as type_txt
        from collector c
        where build_id = #{buildingId}
            and status = '正常'
        ]]>
    </select>

    <select id="getBuildingItems" resultType="java.util.LinkedHashMap">
        SELECT
        *
        FROM a_item i
        LEFT JOIN a_collector c on c.id = i.collector_id
        where c.building_id = #{buildingId}
    </select>




    <select id="getBasicDatas" resultType="java.util.LinkedHashMap">
        SELECT * FROM a_basic_data
    </select>
    <select id="getBasicDataById" resultType="com.energy.entity.BasicData">
        SELECT
        *
        FROM a_basic_data
        WHERE id = #{id}
    </select>
    <insert id="createBasicData" parameterType="com.energy.entity.BasicData">
        INSERT INTO `a_basic_data` (`type`, `name`, `basic_code`, `basic_name`, `note`)
        VALUES ( #{type}, #{name}, #{basicCode}, #{basicName}, #{note})
        <selectKey keyProperty="id" keyColumn="id" resultType="Integer" order="AFTER">
            select LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateBasicData" parameterType="com.energy.entity.BasicData">
        UPDATE `a_basic_data`
        set `type` = #{type}, `name` = #{name}, `basic_code`= #{basicCode}, `basic_name`= #{basicName}, `note`= #{note}
        where id = ${id}
    </update>
    <delete id="deleteBasicData" parameterType="Integer">
        DELETE FROM a_basic_data WHERE id = #{id}
    </delete>



    <!-- 拿到所有 能耗分项 对应的总表类型 -->
    <select id="getBuildingItemTypes" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
          group_id,
          NULLIF(item_id, -1) as item_id
        from v_group_item gi
        where gi.group_type = #{type} and group_building_id=#{buildingId}
          and (gi.group_parent is null or gi.group_parent <= 0)
        ]]>
    </select>

    <!-- 拿到所有 能耗分项 对应的总表类型 -->
    <select id="getItemDatasByHour" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_hour tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByDay" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_day tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByMonth" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_month tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <select id="getItemDatasByYear" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            sum(tmp.val) as total_val,
            tmp.recorded_at
        from v_item_val_by_year tmp
        where tmp.recorded_at >= #{from} and tmp.recorded_at <= #{to}
          and tmp.item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        <![CDATA[
        GROUP BY tmp.recorded_at
        order by tmp.recorded_at asc
        ]]>
    </select>

    <!-- 多个设备，某个时间段内 总值 -->
    <select id="getItemsSummaryVal" resultType="float">
        <![CDATA[
        select
            IFNULL(sum(val),0) as total_val
        from v_item_val_by_year
        where recorded_at >= #{from} and recorded_at <= #{to}
          and item_id in
        ]]>
        <foreach item="item" index="index" collection="itemIds" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getItemTypeBaseInfo" resultType="java.util.LinkedHashMap">
        <![CDATA[
        select
            t.id,
            t.code as type_code,
            t.name as type_name,
            t2.code,
            t2.name,
            t2.calculate,
            t2.table_name,
            t2.parent,
            t2.unit,
            t2.basic_code,
            r.name as rate_name,
            r.rate_type,
            r.cycle as rate_cycle,
            rd.rate,
            rd.num_start,
            rd.num_end,
            rd.time_start,
            rd.time_end
        from a_item_type t
        RIGHT JOIN a_item_type t2 on t2.parent = t.id
        left join a_rate r on r.energy_type = t2.basic_code and r.`status` = 0
        LEFT JOIN a_rate_data rd on rd.rate_id = r.id
        where t.id !="" and t2.calculate != ""
        ]]>
    </select>


    <select id="getItemData" resultType="com.energy.entity.ItemData">
        select
          id,
          item_id as itemId,
          indication,
          other_data as otherData,
          updated_at as updatedAt
        from a_item_data;
    </select>

    <update id="updateItemDatas">
        update a_item_data set indication = indication + rand()*30, updated_at = NOW();
    </update>

    <select id="getEnergyDataLatest" resultType="com.energy.entity.EnergyData">
        select
          e.id,
          e.item_id as itemId,
          e.indication,
          e.diff_indication as diffIndication,
          e.other_data as otherData,
          e.updated_at as updatedAt
        from a_energy_data e
        right join (
            select max(id) as id
            from a_energy_data
            GROUP by item_id
        ) tmp on tmp.id = e.id
    </select>

    <!-- 同步多条记录 -->
    <insert id="recordEnergyDatas">
        insert into a_energy_data (item_id, indication, diff_indication, other_data, recorded_at) VALUES
        <foreach collection="energyDataList" item="item" index="index" separator=",">
            (#{item.itemId}, #{item.indication}, #{item.diffIndication}, #{item.otherData}, #{item.recordedAt})
        </foreach>
    </insert>

</mapper>